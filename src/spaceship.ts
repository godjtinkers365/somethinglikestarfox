
import {Fuelsource} from "./fuelsource"
import {Rocket} from "./rocket"
import {Weapon} from "./weapon"
import {Wing} from "./wing"
import {Lifesupport} from "./lifesupport"
import {MeshBuilder} from "@babylonjs/core"

export class Spaceship {
    constructor() {
        
    }

    energy = 3000;      // everything in the game revolves around energy
    health = 100;       // health is regenerated by life support
    shield = 100;       // shield is regenerated by life support
                        // health regenerates slower than shield
    framerules = {
        0: [Fuelsource], 
        1: [Weapon, Wing, Lifesupport], 
        2: [Weapon, Wing, Lifesupport], 
        3: [Rocket],
        4: [Weapon, Wing, Lifesupport],
        5: [Weapon, Wing, Lifesupport], 
        6: [Weapon, Wing, Lifesupport], 
    }
    frame = { // ships central frame

        // 6 attachments
        // 1 inner fuel storage

        0: Object,  // inner        // fuelsource only 
        1: Object,  // front face   // 
        2: Object,  // left face    //
        3: Object,  // back face    // rockets only
        4: Object,  // right face   //
        5: Object,  // top face     //
        6: Object,  // bottom face  //
    }

    fuelsource:{
        // frameposition: 0,
        // instance: (new Fuelsource(0)), // fuelsource object instance
    }

    rockets: {
    //     frameposition: 3,
    //     instance: new Rocket(0),   // rocket object instance 
    //     quantity: 1,    // rocket quantity, max 5 
    }

    weapons: [
    //     /**
    //      * weapons are allowed anywhere besides
    //      * the rockets position
    //      */
    //     {
    //         frameposition: null,
    //         instance: new Weapon(3,1),    // weapon object instance
    //     }
    ]

    wing: [
    //     /**
    //      * wings are allowed anywhere besides
    //      * the rockets position
    //      * 
    //      * wings increase maneuverability
    //      * wing causes less fuel consumption
    //      * wings stabilize flight path in atomsphere
    //      */
    //     {
    //         frameposition: null,
    //         instance: new Wing(), // wing object instance
    //     }
    ]

    lifesupport: [
    //     /**
    //      * lifesupport are allowed anywhere besides 
    //      * rocket position
    //      */
    //     {
    //         frameposition: null,
    //         instance: new Lifesupport(2,1),
    //     }
    ]


    public move(){}
    public aim(){}
    public fire(){}
    public accel(){}

    // public customize(){
    //     Object.values(this.framerules).forEach((clas,index)=>{
    //         clas.some((classs)=>{
    //             return this.frame[index] instanceof classs
    //         }) || (()=>{ throw new Error() })()
    //     });
    // }

    // public render(scene){

    //     Object.values(this.frame).forEach((attachment)=>{
    //         attachment.render(scene)
    //     });


    // }

}